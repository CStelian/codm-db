---
import Layout from "@layouts/Layout.astro"
import { Image } from "astro:assets"
import { mainSiteSEO } from "@utils/seoData/mainSite"

import type { EliteMissionType } from "@utils/types"

const { id } = Astro.params

const eliteMissions = await fetch(`${Astro.url.origin}/data/ranks/elite-missions.json`)
    .then((res) => res.json())
    .catch((err) => console.error(err))

const eliteMission = eliteMissions.find((eliteMission: EliteMissionType) => eliteMission.id === id)

const title = eliteMission?.name
const desc = `Learn more about the ${title} elite mission in Call of DutyÂ®: Mobile.`
const image = `${Astro.url.origin}/assets/images/ranked/elite-missions/${id}.png`
const url = `${Astro.url.origin}/ranked/elite-missions/${id}`
const type = mainSiteSEO.type
const siteName = mainSiteSEO.siteName
const twitter = mainSiteSEO.twitter
const locale = mainSiteSEO.locale
const keywords = eliteMission?.keywords

const imageExists = await fetch(`${Astro.url.origin}/assets/images/ranked/elite-missions/${id}.png`)
    .then(res => res.ok)
    .catch(() => false)

const startDate = new Date(eliteMission?.startDate)
const endDate = new Date(eliteMission?.endDate)
const noOfDays = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24))

---

<Layout
    title={title}
    desc={desc}
    image={image}
    url={url}
    type={type}
    siteName={siteName}
    twitter={twitter}
    locale={locale}
    keywords={keywords}
>

    <main>
        <h1>
            {title}

            <span>
                ({startDate.toLocaleDateString()} - {endDate.toLocaleDateString()})

                <span class="no-of-days">
                    {noOfDays} days
                </span>
            </span>
        </h1>

        <p>
            {eliteMission?.requirement}
        </p>
        
        {imageExists ? (
            <Image
                src={image}
                alt={title}
                width={400}
                height={100}
            />
        ) : (
            <Image
                src={"/assets/images/ranks/placeholder.png"}
                alt={title}
                width={400}
                height={100}
            />
        )}
        <h2>
           Seasons
        </h2>
        <table>
            <thead>
                <tr>
                    <th>Season No.</th>
                    <th>Season Name</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>No. of Days</th>
                </tr>
            </thead>
            <tbody>
                {eliteMission?.seasons.map((season: any) => (    
                    <tr>
                        <td>{season.season}</td>
                        <td>{season.name}</td>
                        <td>{new Date(season.startDate).toLocaleDateString()}</td>
                        <td>{new Date(season.endDate).toLocaleDateString()}</td>
                        <td>{Math.ceil((new Date(season.endDate).getTime() - new Date(season.startDate).getTime()) / (1000 * 60 * 60 * 24))}</td>
                    </tr>
                ))}
            </tbody>
        </table>

        <h2>
            Reward
        </h2>

        <div class="reward">
            <img src={`${Astro.url.origin}/assets/images/ranked/elite-missions/${eliteMission?.reward.id}.png`} alt={eliteMission?.reward.name} />
            <p>
                {eliteMission?.reward.name}
            </p>
        </div>

        <p class="notice">
            Note: The dates are in UTC.
        </p>

    </main>

</Layout>

<style>

    main {
        padding: 1rem;
        min-height: calc(100vh - 4rem);
        max-width: 1200px;
        margin: 0 auto;
    }

    h1 {
        font-size: 2rem;
        font-weight: 600;
        margin-bottom: 1rem;
        text-align: center;
    }

    h2 {
        font-size: 1.5rem;
        font-weight: 600;
        margin-bottom: 1rem;
        text-align: center;
    }

    img {
        margin: 0 auto;
        display: block;
    }
    

    p {
        font-size: 1.2rem;
        font-weight: 400;
        margin-bottom: 1rem;
        text-align: center;
    }
    

    table {
        border-collapse: collapse;
        margin-bottom: 1rem;
        margin: 0 auto;
    }

    th, td {
        padding: 0.5rem;
        border: 1px solid #000;
        text-align: center;
    }

    .reward {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        gap: 1rem;
        max-width: 300px;
        margin: 0 auto;
    }

    .reward img {
        width: 100%;
        height: 100%;
        object-fit: contain;
    }

    .reward p {
        font-size: 1.2rem;
        font-weight: 400;
        margin-bottom: 1rem;
        text-align: center;
    }

    .no-of-days {
        font-size: 1rem;
        font-weight: 400;
        margin-bottom: 1rem;
        text-align: center;
    }

    span {
        font-size: 1rem;
        font-weight: 400;
        margin-bottom: 1rem;
        text-align: center;
    }

    .notice {
        font-size: 1rem;
        font-weight: 400;
        margin-bottom: 1rem;
        text-align: center;
        color: #ff0000;
        font-style: italic;
    }

</style>

<script>

    const table = document.querySelector("table") 

    if(!table) {
        throw new Error("Table not found")
    }

    table.style.minWidth = `${table.clientWidth}px`

</script>