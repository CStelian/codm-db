---
import { Image } from "astro:assets"
import Countdown from "@components/utils/Countdown.tsx"

const { image,year, season, ctaLink, releaseDate } = Astro.props


let now = new Date().getTime()

let days = "" as number | string
let hours = "" as number | string
let minutes = "" as number | string
let seconds = "" as number | string

let countdownDate = new Date(releaseDate)

let seasonDate = countdownDate.getTime()

let distance = seasonDate - now

if (distance < 0) {
    days = "00"
    hours = "00"
    minutes = "00"
    seconds = "00"
} else {
    days = Math.floor(distance / (1000 * 60 * 60 * 24)).toString()
    hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)).toString()
    minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60)).toString()
    seconds = Math.floor((distance % (1000 * 60)) / 1000).toString()
}

let localizedDate = new Date(releaseDate).toLocaleDateString(undefined, {
    year: "numeric",
    month: "long",
    day: "numeric",
    hour: "numeric"
})

console.log(localizedDate)



console.log(distance)

---

<header class="hero">
    
    <Image
        src={image}
        alt=`Call of Duty: Mobile / ${year} / ${season}``
    />

    <div class="hero-overlay" />

    <div class="hero-content">
        <h1>Call of Duty: Mobile</h1>
        {distance > 0 ? 
            <p>{season} will be releasing on {localizedDate}</p>
            <Countdown date={releaseDate} client:load />
        : <p>{season} is out now.</p>}

        <a href={ctaLink} class="cta" target="_blank">
            Learn More
        </a>
    </div>

</header>

<style>

    .hero {
        position: relative;
        height: 100vh;
        height: 100dvh;
        overflow: hidden;
    }

    .hero img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        object-position: center;
    }

    .hero-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.75);
    }

    .hero-content {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        text-align: center;
        color: white;
    }

    .hero-content h1 {
        font-size: 3rem;
        margin-bottom: 1rem;
    }

    .hero-content p {
        font-size: 1.5rem;
    }

    .cta {
        display: inline-block;
        margin-top: 2rem;
        padding: 1rem 2rem;
        background: var(--primary-color);
        color: var(--secondary-text-color);
        text-decoration: none;
        border-radius: 5px;
        transition: transform 0.3s;
    }

    .cta:after {
        content: "â†’";
        margin-left: 0.5rem;
        transition: margin-left 0.3s;
    }

    .cta:hover {
        transform: scale(1.05);
    }

    .cta:hover:after {
        margin-left: 1rem;
    }

    @media screen and (max-width: 768px) {
        
        .hero-content h1 {
            font-size: 2rem;
        }

        .hero-content p {
            font-size: 1.25rem;
        }

    }

</style>

<script is:inline>

    const days = document.querySelector('#days') 
    const hours = document.querySelector('#hours') 
    const minutes = document.querySelector('#minutes')
    const seconds = document.querySelector('#seconds')

    if (!days || !hours || !minutes || !seconds) {
        throw new Error('Missing DOM elements')
    }

    const now = new Date().getTime()
    const initialTime = new Date('2024-10-03T00:00:00.000Z').getTime()
    const timeRemaining = initialTime - now

    setInterval(() => {
        days.innerHTML = Math.floor(timeRemaining / (1000 * 60 * 60 * 24))
        hours.innerHTML = Math.floor((timeRemaining % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))
        minutes.innerHTML = Math.floor((timeRemaining % (1000 * 60 * 60)) / (1000 * 60))
        seconds.innerHTML = Math.floor((timeRemaining % (1000 * 60)) / 1000)
    }, 1000)
</script>